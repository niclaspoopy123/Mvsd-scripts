AI Auto-Play System - Technical Architecture
=============================================

System Overview:
---------------

The AI Auto-Play system is a comprehensive autonomous gameplay engine that 
combines movement AI, combat AI, and strategic AI to play Murder vs Sheriff
Duel automatically.

Core Components:
---------------

1. AIAutoPlay Class
   - Manages AI state and decision-making
   - Coordinates all AI subsystems
   - Maintains target selection and tracking

2. Movement AI Subsystem
   - Calculates optimal positioning
   - Executes navigation commands
   - Implements evasive maneuvers

3. Combat AI Subsystem
   - Handles weapon selection
   - Controls aiming and shooting
   - Manages ability usage

4. Strategy AI Subsystem
   - Assesses threat levels
   - Makes tactical decisions
   - Manages retreat/advance behavior


System Flow:
-----------

Main Loop (runs every MOVEMENT_UPDATE_RATE seconds):
┌─────────────────────────────────────────────┐
│  1. Check if AI is enabled                  │
│     └─> If not, exit loop                   │
└─────────────────────────────────────────────┘
                    ↓
┌─────────────────────────────────────────────┐
│  2. Decision Making (every DECISION_RATE)   │
│     ├─> Assess current situation            │
│     ├─> Calculate threat level              │
│     ├─> Check health status                 │
│     ├─> Select target                       │
│     ├─> Plan movement                       │
│     └─> Plan combat actions                 │
└─────────────────────────────────────────────┘
                    ↓
┌─────────────────────────────────────────────┐
│  3. Execute Movement                        │
│     ├─> Calculate target position           │
│     ├─> Apply movement style                │
│     ├─> Execute Humanoid:MoveTo()           │
│     └─> Random dodge/jump                   │
└─────────────────────────────────────────────┘
                    ↓
┌─────────────────────────────────────────────┐
│  4. Execute Combat                          │
│     ├─> Auto aim at target                  │
│     ├─> Fire weapon if appropriate          │
│     ├─> Switch weapons if needed            │
│     └─> Use abilities                       │
└─────────────────────────────────────────────┘
                    ↓
┌─────────────────────────────────────────────┐
│  5. Wait and Repeat                         │
│     └─> task_wait(UPDATE_RATE)              │
└─────────────────────────────────────────────┘


Target Selection Algorithm:
---------------------------

Input: List of all enemies
Output: Best target (Player object)

1. Filter Enemies:
   - Exclude local player
   - Check team (if team check enabled)
   - Verify character exists
   - Verify HumanoidRootPart exists
   - Verify Humanoid exists and Health > 0

2. Score Each Enemy:
   IF TARGET_PRIORITY == "nearest":
      score = 1000 - distance
   
   IF TARGET_PRIORITY == "weakest":
      score = (100 - health) + (500 - distance * 0.5)
   
   IF TARGET_PRIORITY == "strongest":
      score = health + (500 - distance * 0.5)

3. Select Highest Score:
   bestTarget = enemy with max(score)

4. Return Target:
   return bestTarget or nil


Movement Position Calculation:
------------------------------

Input: myPos, targetPos, movementStyle
Output: desiredPosition (Vector3)

AGGRESSIVE Style:
  └─> Move directly towards target
      desiredPos = myPos + dirToTarget * min(distance - 20, 10)

BALANCED Style:
  └─> Maintain optimal distance (30-40 studs)
      IF distance > optimalDist + 10:
         desiredPos = myPos + dirToTarget * 10  (move closer)
      ELIF distance < optimalDist - 10:
         desiredPos = myPos - dirToTarget * 10  (move away)
      ELSE:
         desiredPos = myPos + strafeDir * 8     (strafe)

DEFENSIVE Style:
  └─> Keep distance, retreat if close
      IF distance < 40:
         desiredPos = myPos - dirToTarget * 10  (retreat)
      ELSE:
         desiredPos = myPos + strafeDir * 6     (circle strafe)

EVASIVE Style:
  └─> Zigzag pattern
      pattern = floor(time * 2) % 2
      angle = pattern == 0 ? 45° : -45°
      desiredPos = myPos + evasiveDir * 12


Threat Level Calculation:
-------------------------

Input: myPos, list of enemies
Output: threatLevel (0.0 - 1.0)

threatLevel = 0

FOR EACH enemy:
   distance = distance(enemy, myPos)
   
   IF distance < 50:
      threatLevel += (50 - distance) / 50
   END IF
END FOR

threatLevel = min(threatLevel, 1.0)


Combat Decision Tree:
--------------------

┌─────────────────────────────────┐
│   Target Selected?              │
└─────────────────────────────────┘
         │ YES         │ NO
         ↓             └─> Skip Combat
┌─────────────────────────────────┐
│   Auto Aim Enabled?             │
└─────────────────────────────────┘
         │ YES         │ NO
         ↓             ↓
  Aim Camera      Skip Aiming
         │             │
         └─────┬───────┘
               ↓
┌─────────────────────────────────┐
│   Auto Shoot Enabled?           │
└─────────────────────────────────┘
         │ YES         │ NO
         ↓             └─> Manual Shooting
┌─────────────────────────────────┐
│   Distance <= 500?              │
└─────────────────────────────────┘
         │ YES         │ NO
         ↓             └─> Out of Range
  Fire GunShoot Remote
         │
         ↓
┌─────────────────────────────────┐
│   Weapon Switch Enabled?        │
└─────────────────────────────────┘
         │ YES         │ NO
         ↓             └─> Keep Current Weapon
┌─────────────────────────────────┐
│   Distance > 15?                │
└─────────────────────────────────┘
    │ YES              │ NO
    ↓                  ↓
Equip Gun        Equip Knife


Strategic Decision Making:
--------------------------

Health Management:
  IF health% < HEALTH_THRESHOLD:
     isRetreating = true
     └─> Movement: Away from enemies
  ELIF health% > HEALTH_THRESHOLD + 20:
     isRetreating = false
     └─> Movement: Normal behavior
  END IF

Aggression Adjustment:
  aggressionScore = AGGRESSION_LEVEL
  
  IF threatLevel > 0.8:
     aggressionScore *= 0.7  (reduce aggression)
  
  IF health% < 30:
     aggressionScore *= 0.5  (more cautious)
  
  Use aggressionScore to influence movement style


Performance Characteristics:
----------------------------

Update Rates:
  - Decision Rate: 0.1s (10 decisions/second)
  - Movement Rate: 0.05s (20 updates/second)
  - Combat Rate: Per movement update

Computational Complexity:
  - Target Selection: O(n) where n = number of players
  - Movement Calculation: O(1)
  - Combat Execution: O(1)
  - Total per frame: O(n)

Memory Usage:
  - AI State: ~200 bytes
  - Target Cache: ~100 bytes
  - Total: ~300 bytes

CPU Usage:
  - Decision Making: ~2-5% per call
  - Movement Update: ~1-3% per call
  - Total Average: ~5-10% CPU


Integration Points:
------------------

1. Global Config: getgenv().aiAutoPlayConfig
2. UI Toggle: AITab:Toggle("Enable AI Auto-Play")
3. Movement: Humanoid:MoveTo() and ChangeState()
4. Camera: workspace.CurrentCamera.CFrame
5. Shooting: ReplicatedStorage:FindFirstChild("GunShoot")
6. Team Check: getgenv().teamCheckKill
7. Player List: Players:GetPlayers()
8. Character Model: player.Character
9. Humanoid: Character:FindFirstChildOfClass("Humanoid")
10. Position: HumanoidRootPart.Position


Configuration Schema:
--------------------

getgenv().aiAutoPlayConfig = {
   ENABLED: boolean,
   
   -- Movement
   MOVEMENT_ENABLED: boolean,
   MOVEMENT_STYLE: string,  -- "aggressive" | "balanced" | "defensive" | "evasive"
   DODGE_ENABLED: boolean,
   DODGE_DISTANCE: number,
   STRAFE_ENABLED: boolean,
   CIRCLE_STRAFE: boolean,
   
   -- Combat
   COMBAT_ENABLED: boolean,
   AUTO_AIM: boolean,
   AUTO_SHOOT: boolean,
   WEAPON_SWITCH: boolean,
   ABILITY_USAGE: boolean,
   TARGET_PRIORITY: string,  -- "nearest" | "weakest" | "strongest"
   
   -- Strategy
   STRATEGY_ENABLED: boolean,
   COVER_SEEKING: boolean,
   HEALTH_THRESHOLD: number,  -- 0-100
   AGGRESSION_LEVEL: number,  -- 0.0-1.0
   
   -- Performance
   DECISION_RATE: number,  -- seconds
   MOVEMENT_UPDATE_RATE: number,  -- seconds
}


AI State Machine:
----------------

States:
  - IDLE: No enemies, waiting
  - ENGAGING: Moving towards and attacking target
  - RETREATING: Health low, moving away
  - COVERING: Seeking cover (future)
  - ABILITY: Using special ability (future)

Transitions:
  IDLE → ENGAGING: Enemy detected
  ENGAGING → RETREATING: Health < threshold
  RETREATING → ENGAGING: Health > threshold + margin
  ANY → IDLE: No enemies


Movement Style Details:
----------------------

AGGRESSIVE:
  - Closes distance rapidly
  - Direct approach
  - Minimal strafing
  - Best for: Close combat, knife builds

BALANCED:
  - Maintains 30-40 stud distance
  - Strafes when at optimal range
  - Balanced approach/retreat
  - Best for: All-around gameplay

DEFENSIVE:
  - Maintains 40+ stud distance
  - Retreats if enemies close
  - Circle strafing at range
  - Best for: Gun builds, survival

EVASIVE:
  - Zigzag movement pattern
  - Unpredictable positioning
  - High dodge rate
  - Best for: Avoiding hits, confusing enemies


Future Enhancements:
-------------------

1. Cover System:
   - Detect cover objects
   - Path to cover when retreating
   - Peek and shoot from cover

2. Ability System:
   - Detect available abilities
   - Use abilities strategically
   - Coordinate with combat

3. Team Coordination:
   - Detect teammates
   - Follow team members
   - Coordinate attacks

4. Learning System:
   - Track success/failure
   - Adjust strategies based on outcomes
   - Personalize to player's style

5. Advanced Movement:
   - Pathfinding around obstacles
   - Wall running/jumping
   - Environmental awareness

6. Prediction Integration:
   - Use ML predictor for movement
   - Predict enemy positions
   - Pre-aim at predicted location


Debugging:
---------

To debug AI behavior:

1. Enable ESP to see AI's targets
2. Monitor AI state variables
3. Check console for errors
4. Adjust update rates for slower execution
5. Use Developer Mode for advanced logging


Error Handling:
--------------

All AI functions use pcall() wrappers to prevent crashes:
  - Character/humanoid checks before operations
  - Nil checks for all game objects
  - Fallback behaviors on errors
  - Graceful degradation


Compatibility:
-------------

✓ Works with:
  - All game modes
  - Team modes (respects team check)
  - ML Auto Shoot (can work together)
  - Aimbot features
  - ESP
  - Auto farm modes

✗ Conflicts with:
  - Manual movement (AI overrides)
  - Manual camera control (if Auto Aim enabled)


Version History:
---------------

v1.0 - Initial implementation
  - Basic movement AI
  - Combat AI
  - Target selection
  - Strategic retreat
  - UI integration


Notes:
-----

- AI uses standard Roblox APIs (Humanoid:MoveTo, CFrame)
- All calculations run client-side
- No server prediction required
- Minimal network usage
- Compatible with all executors
